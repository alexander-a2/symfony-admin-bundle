<script>
    class Datasheet {

        constructor(datasheet, translations) {
            console.log('Initializing datasheet ' + datasheet.getAttribute('data-datasheet'));
            this.datasheet = {
                container: datasheet,
                id: datasheet.getAttribute('data-datasheet'),
                form: datasheet.querySelector('[data-datasheet-form]'),
                queryKey: {
                    datasheetFilters: datasheet.getAttribute('data-datasheet-filters-key'),
                },
                translations: {
                    pagination: {
                        first_page: 'First',
                        last_page: 'Last',
                    }
                }
            };

            if (translations) {
                this.datasheet.translations = translations;
            }
            this.readPagination();
            this.buildPagination();
            this.initSortingControls();
        }

        readPagination() {
            this.paginationContainer = this.datasheet.container.querySelectorAll('[data-datasheet-pagination]')[0];
            this.pagination = {
                recordsTotal: parseInt(this.paginationContainer.getAttribute('data-datasheet-pagination-records-total')),
                recordsPerPage: parseInt(this.paginationContainer.getAttribute('data-datasheet-pagination-records-per-page')),
                pagesTotal: parseInt(this.paginationContainer.getAttribute('data-datasheet-pagination-pages-total')),
                currentPage: parseInt(this.paginationContainer.getAttribute('data-datasheet-pagination-current-page')),
            }
        }

        buildPagination() {
            const paginationMaxButtons = 10;
            let currentPage = this.pagination.currentPage,
                pagesTotal = this.pagination.pagesTotal,
                pageButtons = Array.from({length: pagesTotal}, (_, i) => i + 1);

            if (pageButtons.length > paginationMaxButtons) {
                const sideLength = paginationMaxButtons / 2;
                const startIndex = Math.max(currentPage - sideLength, 0);
                const endIndex = Math.min(currentPage + sideLength, pageButtons.length - 1);
                pageButtons = pageButtons.slice(startIndex, endIndex + 1);
            }
            this.paginationContainer.appendChild(this.buildPaginationButton(1, this.datasheet.translations.pagination.first_page, currentPage));
            pageButtons.forEach((number) => {
                this.paginationContainer.appendChild(this.buildPaginationButton(number, number, currentPage));
            });
            this.paginationContainer.appendChild(this.buildPaginationButton(pagesTotal, this.datasheet.translations.pagination.last_page, currentPage));
        }

        buildPaginationButton(number, text, currentPage) {
            const li = document.createElement("li");
            li.className = "page-item" + (currentPage === number ? " active" : "");

            const link = document.createElement("a");
            link.className = "page-link";
            link.href = `#page${number}`;
            link.textContent = text;
            link.dataset.pageNumber = number;

            link.addEventListener("click", (event) => {
                event.preventDefault();
                this.onPaginationChange(event.target);
            });

            li.appendChild(link);

            return li;
        }

        onPaginationChange(paginationElement) {
            this.getDatasheetFilterInput('pgn', 'currentPage').value = paginationElement.dataset.pageNumber;
            this.datasheet.form.submit();
        }

        initSortingControls() {
            this.datasheet.container.querySelectorAll('[data-datasheet-column-title]').forEach((element) => {
                element.addEventListener('click', (event) => {
                    event.preventDefault();
                    this.onSortChange(event.target.attributes['data-datasheet-column-title'].value);
                });
            });
        }

        onSortChange(desiredSortBy) {
            let currentSortBy = this.getDatasheetFilterInput('sort', 'by').value;
            let currentSortDirection = this.getDatasheetFilterInput('sort', 'direction').value === 'desc' ? 'desc' : 'asc';
            let desiredSortDirection = currentSortBy === desiredSortBy ? (currentSortDirection === 'asc' ? 'desc' : 'asc') : 'asc';
            this.getDatasheetFilterInput('sort', 'by').value = desiredSortBy;
            this.getDatasheetFilterInput('sort', 'direction').value = desiredSortDirection;
            this.datasheet.form.submit();
        }

        getDatasheetFilterInput(filterName, parameterName) {
            let inputName = this.datasheet.id + '[' + [
                this.datasheet.queryKey.datasheetFilters,
                filterName,
                parameterName,
            ].join('][') + ']';

            return this.datasheet.form.querySelector('input[name="' + inputName + '"]');
        }
    }

    document
        .querySelectorAll('[data-datasheet]')
        .forEach(element => new Datasheet(element, {
            'pagination': {
                'first_page': 'First',
                'last_page': 'Last',
            }
        }));
</script>
