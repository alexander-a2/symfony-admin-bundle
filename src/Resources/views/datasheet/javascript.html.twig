<script>
    class Datasheet {

        constructor(datasheet) {
            console.log('Initializing datasheet ' + datasheet.getAttribute('data-datasheet'));
            this.datasheet = {
                container: datasheet,
                id: datasheet.getAttribute('data-datasheet'),
                form: datasheet.querySelector('form'),
                pagination: datasheet.querySelectorAll('[data-datasheet-pagination]')[0],
            };
            this.readPagination();
            this.buildPagination();
            this.initSortingControls();
            this.showSortingDetails();
            this.initFilterSwitchers();
        }

        readPagination() {
            this.paginationContainer =
                this.pagination = {
                    totalRecordsFiltered: parseInt(this.datasheet.container.getAttribute('data-datasheet-total-records-filtered')),
                    totalRecordsUnfiltered: parseInt(this.datasheet.container.getAttribute('data-datasheet-total-records-unfiltered')),
                    recordsPerPage: parseInt(this.getDatasheetFilterInput('pgn', 'recordsPerPage').value),
                    currentPage: parseInt(this.getDatasheetFilterInput('pgn', 'currentPage').value),
                }
            this.pagination.pagesTotal = Math.ceil(this.pagination.totalRecordsFiltered / this.pagination.recordsPerPage);
        }

        buildPagination() {
            const paginationMaxButtons = 10;
            let currentPage = this.pagination.currentPage,
                pagesTotal = this.pagination.pagesTotal,
                pageButtons = Array.from({length: pagesTotal}, (_, i) => i + 1);

            if (pageButtons.length > paginationMaxButtons) {
                const sideLength = paginationMaxButtons / 2;
                const startIndex = Math.max(currentPage - sideLength, 0);
                const endIndex = Math.min(currentPage + sideLength, pageButtons.length - 1);
                pageButtons = pageButtons.slice(startIndex, endIndex + 1);
            }
            this.datasheet.pagination.appendChild(this.buildPaginationButton(1, 'First', currentPage));
            pageButtons.forEach((number) => {
                this.datasheet.pagination.appendChild(this.buildPaginationButton(number, number, currentPage));
            });
            this.datasheet.pagination.appendChild(this.buildPaginationButton(pagesTotal, 'Last', currentPage));
        }

        buildPaginationButton(number, text, currentPage) {
            const li = document.createElement("li");
            li.className = "page-item" + (currentPage === number ? " active" : "");

            const link = document.createElement("a");
            link.className = "page-link";
            link.href = `#page${number}`;
            link.textContent = text;
            link.dataset.pageNumber = number;

            link.addEventListener("click", (event) => {
                event.preventDefault();
                this.onPaginationChange(event.target);
            });

            li.appendChild(link);

            return li;
        }

        onPaginationChange(paginationElement) {
            this.getDatasheetFilterInput('pgn', 'currentPage').value = paginationElement.dataset.pageNumber;
            this.datasheet.form.submit();
        }

        initSortingControls() {
            this.datasheet.container.querySelectorAll('[data-datasheet-column-title]').forEach((element) => {
                element.addEventListener('click', (event) => {
                    event.preventDefault();
                    this.onSortChange(event.target.attributes['data-datasheet-column-title'].value);
                });
            });
        }

        showSortingDetails() {
            let currentSortBy = this.getDatasheetFilterInput('sort', 'by').value;
            if (currentSortBy === '') {
                return;
            }
            let currentSortDirection = this.getDatasheetFilterInput('sort', 'direction').value === 'desc' ? 'desc' : 'asc';
            this.datasheet.container.querySelectorAll('[data-datasheet-column-sort-details]').forEach((element) => {
                if (element.attributes['data-datasheet-column-sort-details'].value === currentSortBy) {
                    element.innerHTML = currentSortDirection === 'asc' ? ' &#x25B2;' : ' &#x25BC;';
                } else {
                    element.innerHTML = '';
                }
            });

        }

        onSortChange(desiredSortBy) {
            let currentSortBy = this.getDatasheetFilterInput('sort', 'by').value;
            let currentSortDirection = this.getDatasheetFilterInput('sort', 'direction').value === 'desc' ? 'desc' : 'asc';
            let desiredSortDirection = currentSortBy === desiredSortBy ? (currentSortDirection === 'asc' ? 'desc' : 'asc') : 'asc';
            this.getDatasheetFilterInput('sort', 'by').value = desiredSortBy;
            this.getDatasheetFilterInput('sort', 'direction').value = desiredSortDirection;
            // Pagination reset when sorting changes
            this.getDatasheetFilterInput('pgn', 'currentPage').value = 1;
            this.showSortingDetails();
            this.datasheet.form.submit();
        }

        getDatasheetFilterInput(filterName, parameterName) {
            let inputName = 'form[' + this.datasheet.id + '][df][' + filterName + '][' + parameterName + ']';
            return this.datasheet.form.querySelector('[name="' + inputName + '"]');
        }

        initFilterSwitchers() {
            const switchers = this.datasheet.container.querySelectorAll('[data-datasheet-column-filter-switcher]');

            switchers.forEach(selectEl => {
                const column = selectEl.getAttribute('data-datasheet-column-filter-switcher');

                const updateVisibility = () => {
                    const selected = selectEl.value;
                    console.log(selected);
                    console.log('dsb2e_cf_filter_container_firstName_eq');
                    console.log(`${column}_`);
                    this.datasheet.container.querySelectorAll(`[id^="${column}_"]`).forEach(div => {
                        div.style.display = 'none';
                    });
                    console.log(`#${column}_${selected}`);
                    const targetDiv = this.datasheet.container.querySelector(`#${column}_${selected}`);
                    if (targetDiv) {
                        targetDiv.style.display = 'block';
                    }
                };

                selectEl.addEventListener('change', updateVisibility);

                // Trigger once on load
                updateVisibility();
            });
        }
    }

    document
        .querySelectorAll('[data-datasheet]')
        .forEach(element => new Datasheet(element));

</script>
